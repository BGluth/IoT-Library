#ifndef IoTLib_RUN_HELPER_FUNCTIONS_H
#define IoTLib_RUN_HELPER_FUNCTIONS_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stddef.h>
#include <stdbool.h>
#include <time.h>

#include "typedefs.h"

struct IoTLib_MngdArray_String;
struct IoTLib_MngdArray_SnsrID;
struct IoTLib_MngdKVArray_SnsrIDDataPtr;
struct IoTLib_MngdKVArray_SnsrIDString;

void _IoTLib_call_all_void_functions_in_buffer(struct IoTLib_MngdKVArray_SnsrIDDataPtr voidFunctionBuffer);

void _IoTLib_call_sensor_init_functions();
void _IoTLib_call_sensor_power_on_functions();
bool _IoTLib_sensor_can_operate_in_current_temperature(float currentTemperature, IoTLib_SensorID id);
void _IoTLib_determine_active_sensors_by_current_temp(struct IoTLib_MngdArray_SnsrID activeSensors);
void _IoTLib_add_all_sensors_to_active_sensors(struct IoTLib_MngdArray_SnsrID activeSensors);
void _IoTLib_filter_out_sensors_by_poll_frequency(struct IoTLib_MngdArray_SnsrID activeSensors);
bool _IoTLib_enough_time_elapsed_for_sensor_poll(time_t timeSinceLastDeviceRun , IoTLib_SensorID sensorID);
void _IoTLib_replace_sensorID_at_current_index_with_first_sensor_from_back_of_buffer_that_can_run(size_t indexOfSensorToSwap, time_t timeSinceLastDeviceRun, struct IoTLib_MngdArray_SnsrID activeSensors);
void _IoTLib_determine_active_sensors(struct IoTLib_MngdArray_SnsrID activeSensors);
void _IoTLib_poll_data_from_sensors(struct IoTLib_MngdKVArray_SnsrIDDataPtr rawSensorDataBuffer, const struct IoTLib_MngdArray_SnsrID activeSensorIDs);
void _IoTLib_get_string_represenations_of_raw_sensor_data(struct IoTLib_MngdKVArray_SnsrIDString stringSensorDataBuffer, const struct IoTLib_MngdKVArray_SnsrIDDataPtr rawSensorDataBuffer);
void _IoTLib_set_last_poll_time_for_active_sensors(struct IoTLib_MngdArray_SnsrID activeSensorIDs);
bool _IoTLib_enough_time_elapsed_for_upload();
void _IoTLib_upload_all_pending_sensor_data_or_store_new_data_locally(struct IoTLib_MngdKVArray_SnsrIDDataPtr newRawSensorDataBuffer, const struct IoTLib_MngdArray_SnsrID activeSensorIDs);
void _IoTLib_upload_all_pending_sensor_data(const struct IoTLib_MngdKVArray_SnsrIDDataPtr newRawSensorDataBuffer, const struct IoTLib_MngdArray_SnsrID activeSensorIDs);
void _IoTLib_generate_url_payloads_for_newly_polled_sensor_data(struct IoTLib_MngdArray_String urlPayloadsBuffer, const struct IoTLib_MngdArray_SnsrID activeSensorIDs, const struct IoTLib_MngdKVArray_SnsrIDDataPtr rawSensorDataBuffer);
void _IoTLib_generate_url_payloads_for_all_unsent_polled_sensor_data(struct IoTLib_MngdArray_String urlPayloadsBuffer);
void _IoTLib_store_newly_polled_sensor_data_locally(const struct IoTLib_MngdKVArray_SnsrIDDataPtr newRawSensorDataBuffer);
void _IoTLib_wait_for_tasks_to_complete();
void _IoTLib_store_current_time_as_upload_time();

// Debugging related functions
void _IoTLib_debug_active_sensor_names_and_ids(struct IoTLib_MngdArray_SnsrID activeSensors);
void _IoTLib_debug_print_current_time();
void _IoTLib_debug_print_unsent_stored_sensor_polls(size_t storedUnsentPollCount);

#ifdef __cplusplus
}
#endif

#endif
